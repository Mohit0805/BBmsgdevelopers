{"version":3,"sources":["logo.svg","App.js","AvatarList.js","Avatar.js","serviceWorker.js","index.js"],"names":["module","exports","App","AvatarList","props","className","src","gender","name","alt","work","Avatar","state","this","setState","AvatarListArray1","id","ArrayAvatarCard","map","AvatarCard","i","key","onClick","altername","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,+LC2B5BC,I,4BCbAC,G,WAXI,SAACC,GAChB,OAEI,yBAAKC,UAAU,0DACX,yBAAKC,IAAG,sCAAiCF,EAAMG,OAAvC,YAAiDH,EAAMI,MAAQC,IAAI,WAC3E,4BAAML,EAAMI,MACZ,2BAAIJ,EAAMM,SCwEPC,E,kDAzEX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTJ,KAAO,yBAHF,E,wDAQTK,KAAKC,SAAS,CACVN,KAAO,uB,+BAIJ,IAAD,OACJO,EAAmB,CACjB,CACIC,GAAG,EACHR,KAAK,QACLD,OAAO,OACPG,KAAK,iBAET,CACIM,GAAG,EACHR,KAAK,SACLD,OAAO,OACPG,KAAK,iBAET,CACIM,GAAG,EACHR,KAAK,QACLD,OAAO,OACPG,KAAK,iBAET,CACIM,GAAG,EACHR,KAAK,YACLD,OAAO,OACPG,KAAK,gBAET,CACIM,GAAG,EACHR,KAAK,UACLD,OAAO,SACPG,KAAK,iBAET,CACIM,GAAG,EACHR,KAAK,QACLD,OAAO,SACPG,KAAK,sBAKPO,EAAkBF,EAAiBG,KAAK,SAACC,EAAYC,GACvD,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAGJ,GAAID,EAAiBK,GAAGJ,GAC/BT,OAAQQ,EAAiBK,GAAGb,OAC5BC,KAAMO,EAAiBK,GAAGZ,KAC1BE,KAAMK,EAAiBK,GAAGV,UAKlD,OACA,yBAAKL,UAAU,YACX,4BAAKQ,KAAKD,MAAMJ,MAChB,4BAAQc,QAAY,kBAAM,EAAKC,cAA/B,SACA,6BACKN,O,GAtEKO,aCMFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7da5bf3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Hello World!</h1>\n        <h1>Welcome to my channel, {this.props.name}</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport \"./Avatar.css\";\r\n\r\nconst AvatarList = (props) => {\r\n    return (\r\n\r\n        <div className='avatarstyle ma4 bg-light-blue dib pa4 grow shadow-4 tc'>\r\n            <img src={`https://joeschmoe.io/api/v1/${props.gender}/${props.name}`} alt=\"Avatar\"/>\r\n            <h1 >{props.name}</h1>\r\n            <p>{props.work}</p> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AvatarList;","import React, { Component } from 'react';\r\nimport './Avatar.css';\r\nimport 'tachyons';\r\nimport AvatarList from \"./AvatarList\";\r\n\r\n//const Avatar = (props) => {\r\n class Avatar extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            name : \"BBmsg welcomes you :)\"\r\n        }\r\n    }\r\n\r\n    altername(){\r\n        this.setState({\r\n            name : \"BBmsg Developers\"\r\n        })\r\n    }\r\n\r\n     render() {\r\n    const AvatarListArray1 = [\r\n            {\r\n                id:1,\r\n                name:\"Mohit\",\r\n                gender:\"male\",\r\n                work:\"Web Developer\"\r\n            },\r\n            {\r\n                id:2,\r\n                name:\"Madhab\",\r\n                gender:\"male\",\r\n                work:\"Web Developer\"\r\n            },\r\n            {\r\n                id:3,\r\n                name:\"Rohit\",\r\n                gender:\"male\",\r\n                work:\"App Developer\"\r\n            },\r\n            {\r\n                id:4,\r\n                name:\"Shayantan\",\r\n                gender:\"male\",\r\n                work:\"Data Analyst\"\r\n            },\r\n            {\r\n                id:5,\r\n                name:\"Suchita\",\r\n                gender:\"female\",\r\n                work:\"App Developer\"\r\n            },\r\n            {\r\n                id:6,\r\n                name:\"Vidhi\",\r\n                gender:\"female\",\r\n                work:\"Graphics Designer\"\r\n            }\r\n        ]\r\n\r\n\r\n        const ArrayAvatarCard = AvatarListArray1.map( (AvatarCard, i) => {\r\n            return <AvatarList key={i} id={AvatarListArray1[i].id} \r\n                                gender={AvatarListArray1[i].gender}\r\n                                name={AvatarListArray1[i].name} \r\n                                work={AvatarListArray1[i].work}/> \r\n        }\r\n\r\n        )\r\n\r\n        return (\r\n        <div className=\"mainpage\">\r\n            <h1>{this.state.name}</h1>\r\n            <button onClick = { () => this.altername() }>Alter</button>\r\n            <br />\r\n                {ArrayAvatarCard}\r\n        </div>\r\n    )\r\n}\r\n }\r\nexport default Avatar; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Demo from './Demo';\nimport Avatar from './Avatar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Avatar/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}